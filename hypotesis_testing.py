# -*- coding: utf-8 -*-
"""Hypotesis Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PFT-lt6Wo1XhJhha3EF7KKaEepd1dCUT
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

"""**1 Population Hypotesis Testing**"""

nilai = [74, 49, 68, 86, 80, 71, 77, 81, 72, 77]

"""hitung scr manual, everything written here is a formula from t testing formula, go check ur notes"""

x_bar = np.mean(nilai)        #meann from nilai
mu = 80                      #bc we want the grades is true if it higher than 80
s = np.std(nilai, ddof =1 )  #its the deviation standard, the (nilai, ddof = 1) is a default parametre that we needed
n = len(nilai)

t_stat = (x_bar - mu)/(s / np.sqrt(n))  #t testing formula

print(t_stat)

from scipy.stats import t
t.ppf (0.05, n-1) #n - 1 is degree of return(derajat bebas)
                  #0.05 is from 5% its like used to find the bias (critical t)

"""define using function"""

from scipy.stats import ttest_1samp

t_stat, p_value = ttest_1samp(nilai, 80)
t_stat

"""**2 population hypotesis testing**"""

a_class = [74, 49, 68, 86, 80,71, 77, 81, 72,77]
b_class = [78,57,65,82,73,76,54,58]

"""manually"""

x_bar1 = np.mean(a_class)
s1 = np.std(nilai, ddof =1 )
n1 = len(a_class)

x_bar2 = np.mean(b_class)
s2 = np.std(nilai, ddof =1 )
n2 = len(b_class)

df = n1 + n2 -2
sp = np.sqrt(((n1-1) * np.power(s1,2) + (n2-1) * np.power(s2,2))/df)

t_stat = (x_bar1 - x_bar2) / (sp * np.sqrt(1/n1 + 1/n2))
print(t_stat)

"""Using Function"""

from scipy.stats import ttest_ind

t_stat, p_value = ttest_ind(a_class, b_class, equal_var = True)

if p_value < 0.05:
  print("a class grade tdk sm dengan b class grade")
else:
  print ("a class grade = b class grade")

"""**Paired sample test**

contoh = nilai setelah dan sebelum uts

hitung manual
"""

before = [59, 71, 64, 75, 75, 61, 52, 66, 71, 69]
after =  [98, 91, 86, 72, 77, 54, 69, 89, 66, 87]

beda = np.array(after) - np.array(before)
x_beda = np.mean(beda)
sd = np.std(beda, ddof =1)
n = len(beda)
mu = 0

t_stat = (x_beda - mu) / (sd / np.sqrt(n))
t_stat

"""using function"""

from scipy.stats import ttest_rel

t_stat, p_value = ttest_rel(after, before)

if p_value < 0.05:
  print("nilai beda dr sebelum")
else:
  print("nilai sama")

"""**Proportion difference test**

study case =

seorang peneliti menyelidiki kecelakaan kapal, mereka ingin mengetahui perbedaan jumlah penumpang yang selamat berdasarkan jenis kelamin mereka
"""

perempuan_selamat = 233
total_perempuan = 314
laki_selamat = 109
total_laki = 577

proporsi_p = perempuan_selamat / total_perempuan
proporsi_l = laki_selamat / total_laki

prop_gabungan = (perempuan_selamat + laki_selamat)/(total_laki+total_perempuan)

t_stat = (proporsi_p - proporsi_l) / np.sqrt(prop_gabungan*(1-prop_gabungan)*(1/total_laki + 1/total_perempuan))
t_stat

"""using function"""

from statsmodels.stats.proportion import proportions_ztest

proportions_ztest([perempuan_selamat, laki_selamat], [total_perempuan, total_laki])